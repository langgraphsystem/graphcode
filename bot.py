# bot.py
import os
import io
import asyncio
import logging
from pathlib import Path
from typing import Optional
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, 
    MessageHandler, 
    CommandHandler, 
    CallbackQueryHandler,
    ContextTypes, 
    filters
)
from telegram.constants import ParseMode

from graph_app import APP, DEFAULT_MODEL, VALID_MODELS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=os.getenv("LOG_LEVEL", "INFO"),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger("tg-bot")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise ValueError("TELEGRAM_TOKEN not found in environment variables")

# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–≤ –±–∞–π—Ç–∞—Ö)
MAX_FILE_SIZE = int(os.getenv("MAX_FILE_SIZE", "10485760"))  # 10MB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –≠–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
EMOJI = {
    "success": "‚úÖ",
    "error": "‚ùå",
    "warning": "‚ö†Ô∏è",
    "file": "üìÑ",
    "folder": "üìÅ",
    "code": "üíª",
    "download": "üì•",
    "model": "üß†",
    "reset": "‚ôªÔ∏è",
    "info": "‚ÑπÔ∏è",
    "loading": "‚è≥",
}

# –¢–µ–∫—Å—Ç—ã –∫–æ–º–∞–Ω–¥
HELP_TEXT = """
ü§ñ **–ö–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ LangGraph**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/create <file>` - –°–æ–∑–¥–∞—Ç—å/–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª
‚Ä¢ `/switch <file>` - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Ñ–∞–π–ª
‚Ä¢ `/files` - –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
‚Ä¢ `/model [name]` - –í—ã–±–æ—Ä/–ø—Ä–æ—Å–º–æ—Ç—Ä –º–æ–¥–µ–ª–∏
‚Ä¢ `/reset` - –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞
‚Ä¢ `/download [filter]` - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã
‚Ä¢ `/status` - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: `/create app.py`
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
3. –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–¥ —Å –ø–æ–º–æ—â—å—é AI

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¢–ó
‚Ä¢ `.txt` —Ñ–∞–π–ª—ã —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
‚Ä¢ `.diff` –∏–ª–∏ `.patch` —Ñ–∞–π–ª—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏

**–§–∏–ª—å—Ç—Ä—ã –¥–ª—è /download:**
‚Ä¢ `latest` - —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
‚Ä¢ `versions` - —Ç–æ–ª—å–∫–æ –≤–µ—Ä—Å–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
‚Ä¢ `<filename>` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
‚Ä¢ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –≤—Å–µ —Ñ–∞–π–ª—ã
"""

async def invoke_graph(chat_id: int, text: str, current_model: Optional[str] = None):
    """–í—ã–∑–æ–≤ LangGraph —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
        model = current_model or DEFAULT_MODEL
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ —á–∞—Ç—É —á–µ—Ä–µ–∑ thread_id
        result = await asyncio.to_thread(
            APP.invoke,
            {
                "chat_id": chat_id, 
                "input_text": text, 
                "model": model
            },
            {"configurable": {"thread_id": str(chat_id)}},
        )
        return result
    except Exception as e:
        logger.error(f"Graph invocation error for chat {chat_id}: {e}", exc_info=True)
        raise

async def on_start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        f"{EMOJI['code']} –Ø –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–∞ –±–∞–∑–µ LangGraph.\n"
        f"–ò—Å–ø–æ–ª—å–∑—É—é PROMPT-ADAPTER ‚Üí Codegen –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞.\n\n"
        f"–ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã `/create <filename>` —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª.\n"
        f"–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π `/help` –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏."
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª", callback_data="cmd_create"),
            InlineKeyboardButton("üìÅ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="cmd_files"),
        ],
        [
            InlineKeyboardButton("üß† –ú–æ–¥–µ–ª—å", callback_data="cmd_model"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="cmd_help"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        welcome_text, 
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def on_help(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await update.message.reply_text(
        HELP_TEXT,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True
    )

async def on_status(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ /files
        result = await invoke_graph(chat_id, "/files")
        files_info = result.get("reply_text", "–ù–µ—Ç —Ñ–∞–π–ª–æ–≤")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∞–π–ª
        result_model = await invoke_graph(chat_id, "/model")
        model_info = result_model.get("reply_text", "")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        current_model = DEFAULT_MODEL
        if "–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:" in model_info:
            current_model = model_info.split("`")[1] if "`" in model_info else DEFAULT_MODEL
        
        status_text = (
            f"{EMOJI['info']} **–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞**\n\n"
            f"{EMOJI['model']} –ú–æ–¥–µ–ª—å: `{current_model}`\n"
            f"{EMOJI['folder']} –§–∞–π–ª—ã:\n{files_info}"
        )
        
    except Exception as e:
        logger.error(f"Status check error: {e}")
        status_text = f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"
    
    await update.message.reply_text(
        status_text,
        parse_mode=ParseMode.MARKDOWN
    )

def _decode_bytes(b: bytes) -> str:
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫–∏"""
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
    encodings = ["utf-8-sig", "utf-8", "cp1251", "cp1252", "latin-1", "iso-8859-1"]
    
    for enc in encodings:
        try:
            return b.decode(enc)
        except (UnicodeDecodeError, LookupError):
            continue
    
    # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫
    return b.decode("utf-8", errors="ignore")

async def _handle_text_to_graph(chat_id: int, payload: str, update: Update):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await update.message.reply_text(
            f"{EMOJI['loading']} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...",
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –í—ã–∑—ã–≤–∞–µ–º –≥—Ä–∞—Ñ
        result = await invoke_graph(chat_id, payload)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        reply = result.get("reply_text", "–ì–æ—Ç–æ–≤–æ.")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Telegram
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        max_length = 4096
        if len(reply) > max_length:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            parts = [reply[i:i+max_length] for i in range(0, len(reply), max_length)]
            for part in parts:
                await update.message.reply_text(
                    part,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
        else:
            await update.message.reply_text(
                reply,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞—Ä—Ö–∏–≤)
        file_path = result.get("file_to_send")
        if file_path and os.path.exists(file_path):
            try:
                file_size = os.path.getsize(file_path)
                if file_size > 50 * 1024 * 1024:  # 50MB - –ª–∏–º–∏—Ç Telegram
                    await update.message.reply_text(
                        f"{EMOJI['warning']} –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size // (1024*1024)}MB). "
                        f"–ú–∞–∫—Å–∏–º—É–º 50MB –¥–ª—è Telegram."
                    )
                else:
                    with open(file_path, "rb") as f:
                        await update.message.reply_document(
                            document=f,
                            filename=os.path.basename(file_path),
                            caption=f"{EMOJI['download']} –ê—Ä—Ö–∏–≤ –≥–æ—Ç–æ–≤"
                        )
            except Exception as e:
                logger.error(f"Failed to send file: {e}")
                await update.message.reply_text(
                    f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {str(e)[:100]}"
                )
                
    except Exception as e:
        logger.exception("Error in text handling")
        error_msg = str(e)[:200]
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        try:
            await loading_msg.delete()
        except:
            pass
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        if "api_key" in error_msg.lower():
            error_text = f"{EMOJI['error']} –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º OpenAI"
        elif "rate" in error_msg.lower():
            error_text = f"{EMOJI['error']} –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        elif "timeout" in error_msg.lower():
            error_text = f"{EMOJI['error']} –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI"
        else:
            error_text = f"{EMOJI['error']} –û—à–∏–±–∫–∞: {error_msg}"
        
        await update.message.reply_text(error_text)

async def on_text(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    chat_id = update.effective_chat.id
    text = update.message.text or ""
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    user = update.effective_user
    logger.info(f"Text from {user.username or user.id}: {text[:100]}")
    
    await _handle_text_to_graph(chat_id, text, update)

async def on_document(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (.txt, .diff, .patch –∏ –¥—Ä.)"""
    chat_id = update.effective_chat.id
    doc = update.message.document
    caption = update.message.caption or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if doc.file_size > MAX_FILE_SIZE:
        await update.message.reply_text(
            f"{EMOJI['error']} –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({doc.file_size // (1024*1024)}MB). "
            f"–ú–∞–∫—Å–∏–º—É–º {MAX_FILE_SIZE // (1024*1024)}MB."
        )
        return
    
    # –õ–æ–≥–∏—Ä—É–µ–º
    logger.info(f"Document received: {doc.file_name}, size: {doc.file_size}")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        tgfile = await ctx.bot.get_file(doc.file_id)
        bio = io.BytesIO()
        await tgfile.download_to_memory(out=bio)
        content = _decode_bytes(bio.getvalue())
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        name = (doc.file_name or "file").lower()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º payload
        payload = caption.strip()
        if payload:
            payload += "\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ
        payload += f"[ATTACHED: {name}]\n"
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
        if name.endswith((".diff", ".patch")):
            # Diff/patch —Ñ–∞–π–ª—ã –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –±–ª–æ–∫ –∫–æ–¥–∞
            payload += f"```diff\n{content}\n```"
        elif name.endswith((".py", ".js", ".ts", ".java", ".cpp", ".c", ".go", ".rs")):
            # –ö–æ–¥ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
            ext = name.split(".")[-1]
            lang_map = {
                "py": "python", "js": "javascript", "ts": "typescript",
                "cpp": "cpp", "c": "c", "java": "java", "go": "go", "rs": "rust"
            }
            lang = lang_map.get(ext, ext)
            payload += f"```{lang}\n{content}\n```"
        elif name.endswith((".json", ".yaml", ".yml", ".toml", ".xml")):
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            ext = name.split(".")[-1]
            payload += f"```{ext}\n{content}\n```"
        else:
            # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            payload += content
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ
        await _handle_text_to_graph(chat_id, payload, update)
        
    except Exception as e:
        logger.exception("Document processing error")
        await update.message.reply_text(
            f"{EMOJI['error']} –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç: {str(e)[:200]}"
        )

async def on_callback_query(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    chat_id = update.effective_chat.id
    data = query.data
    
    # –ú–∞–ø–ø–∏–Ω–≥ callback_data –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    command_map = {
        "cmd_create": "/create main.py",
        "cmd_files": "/files",
        "cmd_model": "/model",
        "cmd_help": "/help",
    }
    
    if data in command_map:
        if data == "cmd_help":
            await query.message.reply_text(
                HELP_TEXT,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –≥—Ä–∞—Ñ
            command = command_map[data]
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π Update –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
            class FakeMessage:
                def __init__(self, msg):
                    self.message = msg
                    
                async def reply_text(self, text, **kwargs):
                    return await msg.reply_text(text, **kwargs)
                    
                async def reply_document(self, **kwargs):
                    return await msg.reply_document(**kwargs)
            
            fake_update = FakeMessage(query.message)
            await _handle_text_to_graph(chat_id, command, fake_update)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text(
                f"{EMOJI['error']} –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    except:
        pass

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if not TELEGRAM_TOKEN:
        logger.error("TELEGRAM_TOKEN not found in environment")
        raise ValueError("TELEGRAM_TOKEN is required")
    
    if not os.getenv("OPENAI_API_KEY"):
        logger.warning("OPENAI_API_KEY not found - API calls will fail")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", on_start))
    app.add_handler(CommandHandler("help", on_help))
    app.add_handler(CommandHandler("status", on_status))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))
    app.add_handler(MessageHandler(filters.Document.ALL, on_document))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ (–¥–ª—è /create, /switch, /files, /model, /reset, /download)
    app.add_handler(MessageHandler(filters.COMMAND, on_text))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(on_callback_query))
    
    # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info(f"Starting bot with {len(app.handlers[0])} handlers...")
    logger.info(f"Models available: {', '.join(sorted(VALID_MODELS))}")
    logger.info(f"Default model: {DEFAULT_MODEL}")
    
    # –ó–∞–ø—É—Å–∫
    app.run_polling(
        allowed_updates=Update.ALL_TYPES,
        drop_pending_updates=True  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    )

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}", exc_info=True)
        raise
